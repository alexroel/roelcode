---
import { Icon } from "astro-icon/components";

interface Props {
  courseId: string;
  totalLessons: number;
  courseName: string;
  showNextLessonTip?: boolean;
}

const { courseId, totalLessons, showNextLessonTip = true } = Astro.props;
---

<div
  class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4 mb-6 course-progress-component"
  data-course-id={courseId}
  data-total-lessons={totalLessons}
>
  <div class="flex items-center justify-between mb-3">
    <h3 class="text-sm font-semibold text-gray-900 dark:text-white">
      Progreso del curso
    </h3>
    <span class="text-sm text-gray-600 dark:text-gray-400 progress-text">
      0 de {totalLessons}
    </span>
  </div>

  <!-- Barra de progreso -->
  <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mb-3">
    <div
      class="bg-emerald-600 h-2 rounded-full transition-all duration-300 progress-bar"
      style="width: 0%"
    >
    </div>
  </div>

  <!-- Porcentaje -->
  <div class="flex items-center justify-between text-xs">
    <span class="text-gray-600 dark:text-gray-400 progress-percentage">
      0% completado
    </span>
    <div
      class="completion-badge hidden items-center gap-1 text-green-600 dark:text-green-400"
    >
      <Icon name="tabler:check" class="w-4 h-4" />
      <span class="font-medium">¡Completado!</span>
    </div>
  </div>
</div>

<!-- Siguiente lección recomendada -->
{
  showNextLessonTip && (
    <div class="continue-learning-tip bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800 rounded-lg p-4 mb-6">
      <div class="flex items-center gap-3">
        <div class="flex-shrink-0">
          <Icon
            name="tabler:lightbulb"
            class="w-5 h-5 text-emerald-600 dark:text-emerald-400"
          />
        </div>
        <div>
          <h4 class="text-sm font-medium text-emerald-900 dark:text-emerald-100 mb-1">
            Continúa aprendiendo
          </h4>
          <p class="text-xs text-emerald-700 dark:text-emerald-300">
            ¡Vas muy bien! Sigue con la siguiente lección para completar el
            curso.
          </p>
        </div>
      </div>
    </div>
  )
}

<script is:inline>
  const updateCourseProgressComponent = () => {
    const courseProgressComponents = document.querySelectorAll(
      ".course-progress-component"
    );

    courseProgressComponents.forEach((component) => {
      const courseId = component.getAttribute("data-course-id");
      const totalLessons = parseInt(
        component.getAttribute("data-total-lessons") || "0"
      );

      if (!courseId) return;

      const progress = localStorage.getItem("courseProgress");
      const progressData = progress ? JSON.parse(progress) : {};
      const courseProgress = progressData[courseId];

      if (courseProgress) {
        const completed = courseProgress.completedLessons.length;
        const percentage = Math.round((completed / totalLessons) * 100);

        // Actualizar elementos del DOM
        const progressBar = component.querySelector(".progress-bar");
        const progressText = component.querySelector(".progress-text");
        const progressPercentage = component.querySelector(
          ".progress-percentage"
        );
        const completionBadge = component.querySelector(".completion-badge");
        const continueLearningTip = document.querySelector(
          ".continue-learning-tip"
        );

        if (progressBar) {
          progressBar.style.width = `${percentage}%`;
        }
        if (progressText) {
          progressText.textContent = `${completed} de ${totalLessons}`;
        }
        if (progressPercentage) {
          progressPercentage.textContent = `${percentage}% completado`;
        }
        if (completionBadge) {
          if (percentage === 100) {
            completionBadge.classList.remove("hidden");
            completionBadge.classList.add("flex");
          } else {
            completionBadge.classList.add("hidden");
            completionBadge.classList.remove("flex");
          }
        }
        if (continueLearningTip) {
          if (percentage === 100) {
            continueLearningTip.style.display = "none";
          } else {
            continueLearningTip.style.display = "block";
          }
        }
      }
    });
  };

  // Actualizar en carga de página
  const handleCourseProgressLoad = () => {
    updateCourseProgressComponent();
  };

  // Escuchar cambios en localStorage
  window.addEventListener("storage", (e) => {
    if (e.key === "courseProgress") {
      updateCourseProgressComponent();
    }
  });

  // Escuchar evento personalizado para actualizar el progreso
  window.addEventListener(
    "updateCourseProgress",
    updateCourseProgressComponent
  );

  // Ejecutar en carga inicial y en cada navegación de Astro
  document.addEventListener("astro:page-load", handleCourseProgressLoad);
  document.addEventListener("astro:after-swap", handleCourseProgressLoad);
  document.addEventListener("DOMContentLoaded", handleCourseProgressLoad);

  // Para navegación inicial si no hay transiciones de Astro
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", handleCourseProgressLoad);
  } else {
    handleCourseProgressLoad();
  }
</script>
