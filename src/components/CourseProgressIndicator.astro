---
import { Icon } from "astro-icon/components";

interface Props {
  courseId: string;
  totalLessons: number;
  size?: "small" | "medium" | "large";
  showText?: boolean;
}

const {
  courseId,
  totalLessons,
  size = "medium",
  showText = true,
} = Astro.props;

const sizeClasses = {
  small: "h-1.5",
  medium: "h-2",
  large: "h-3",
};

const textSizeClasses = {
  small: "text-xs",
  medium: "text-sm",
  large: "text-base",
};
---

<div
  class={`course-progress-indicator ${size === "small" ? "mb-2" : "mb-4"}`}
  data-course-id={courseId}
  data-total-lessons={totalLessons}
>
  {
    showText && (
      <div
        class={`flex items-center justify-between ${textSizeClasses[size]} text-gray-600 dark:text-gray-400 mb-1`}
      >
        <span class="font-medium">Progreso del curso</span>
        <span class="progress-text">0 / {totalLessons}</span>
      </div>
    )
  }

  <div
    class={`w-full bg-gray-200 dark:bg-gray-700 rounded-full ${sizeClasses[size]}`}
  >
    <div
      class={`bg-emerald-500 ${sizeClasses[size]} rounded-full transition-all duration-300 progress-bar`}
      style="width: 0%"
    >
    </div>
  </div>

  {
    showText && (
      <div
        class={`flex items-center justify-between ${textSizeClasses[size]} mt-1`}
      >
        <span class="text-gray-500 dark:text-gray-400 progress-percentage">
          0% completado
        </span>
        <div class="completion-status hidden items-center gap-1 text-emerald-600 dark:text-emerald-400">
          <Icon name="tabler:check" class="w-3 h-3" />
          <span class="font-medium">Completado</span>
        </div>
      </div>
    )
  }
</div>

<script is:inline>
  const updateCourseProgressIndicators = () => {
    const indicators = document.querySelectorAll(".course-progress-indicator");

    indicators.forEach((indicator) => {
      const courseId = indicator.getAttribute("data-course-id");
      const totalLessons = parseInt(
        indicator.getAttribute("data-total-lessons") || "0"
      );

      if (!courseId) return;

      const progress = localStorage.getItem("courseProgress");
      const progressData = progress ? JSON.parse(progress) : {};
      const courseProgress = progressData[courseId];

      if (courseProgress) {
        const completed = courseProgress.completedLessons.length;
        const percentage = Math.round((completed / totalLessons) * 100);

        // Actualizar elementos del DOM
        const progressBar = indicator.querySelector(".progress-bar");
        const progressText = indicator.querySelector(".progress-text");
        const progressPercentage = indicator.querySelector(
          ".progress-percentage"
        );
        const completionStatus = indicator.querySelector(".completion-status");

        if (progressBar) {
          progressBar.style.width = `${percentage}%`;
        }
        if (progressText) {
          progressText.textContent = `${completed} / ${totalLessons}`;
        }
        if (progressPercentage) {
          progressPercentage.textContent = `${percentage}% completado`;
        }
        if (completionStatus) {
          if (percentage === 100) {
            completionStatus.classList.remove("hidden");
            completionStatus.classList.add("flex");
          } else {
            completionStatus.classList.add("hidden");
            completionStatus.classList.remove("flex");
          }
        }
      }
    });
  };

  // Funci칩n para manejar la carga de la p치gina
  const handleProgressIndicatorLoad = () => {
    updateCourseProgressIndicators();
  };

  // Escuchar cambios en localStorage
  window.addEventListener("storage", (e) => {
    if (e.key === "courseProgress") {
      updateCourseProgressIndicators();
    }
  });

  // Escuchar evento personalizado
  window.addEventListener(
    "updateCourseProgress",
    updateCourseProgressIndicators
  );

  // Ejecutar en carga inicial y en cada navegaci칩n de Astro
  document.addEventListener("astro:page-load", handleProgressIndicatorLoad);
  document.addEventListener("astro:after-swap", handleProgressIndicatorLoad);
  document.addEventListener("DOMContentLoaded", handleProgressIndicatorLoad);

  // Para navegaci칩n inicial si no hay transiciones de Astro
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", handleProgressIndicatorLoad);
  } else {
    handleProgressIndicatorLoad();
  }
</script>
